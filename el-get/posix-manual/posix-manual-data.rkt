#! /usr/bin/env racket

;; Copyright 2019 Lassi Kortela
;; SPDX-License-Identifier: ISC

#lang racket

(require net/url)

;; raco pkg install --batch --skip-installed --deps search-auto scrapyard sxml
(require scrapyard sxml)

(define (join-url base rel)
  (url->string (combine-url/relative (string->url base) rel)))

(define (relative-url base url)
  (unless (string-prefix? url base)
    (error "URL doesn't start with the right base URL"))
  (substring url (string-length base)))

(define posix-base-url "https://pubs.opengroup.org/onlinepubs/9699919799/")

(define (alphabet-pages)
  (let* ((page (string-append posix-base-url "idx/alphabet.html"))
         (document (scrape-html (cache-http "alphabet.html" page))))
    (map (lambda (href) (join-url page href))
         ((sxpath "//a/@href/text()") document))))

(define (alphabet-page->pairs page)
  (let ((document (scrape-html (cache-http (file-name-from-path page) page))))
    (map (lambda (elem)
           (let ((text (first ((sxpath "text()") elem)))
                 (href (first ((sxpath "@href/text()") elem))))
             (cons text (relative-url posix-base-url (join-url page href)))))
         ((sxpath "//li[@type='disc']/a") document))))

(define (all-pairs)
  (let ((pairs (append-map alphabet-page->pairs (alphabet-pages))))
    (sort pairs string<? #:key car)))

(define (write-emacs-lisp-file)
  (call-with-atomic-output-file
   "posix-manual-data.el"
   (lambda (out _)
     (parameterize ((current-output-port out))
       (display ";;; posix-manual-data.el --- POSIX manual page data")
       (displayln " -*- lexical-binding: t -*-")
       (displayln ";;")
       (displayln ";;; Commentary:")
       (displayln ";;")
       (displayln ";; Automatically generated by posix-manual-data.rkt.")
       (displayln ";;")
       (displayln ";;; Code:")
       (newline)
       (displayln "(defconst posix-manual-data-base-url")
       (display "  ") (writeln posix-base-url)
       (display "  ") (write "POSIX manual page base URL.") (displayln ")")
       (newline)
       (displayln "(defconst posix-manual-data--as-string")
       (display "  (concat")
       (for-each (lambda (pair)
                   (newline)
                   (display "   ") (writeln (string-append (car pair) "\t"))
                   (display "   ") (write (string-append (cdr pair) "\n")))
                 (all-pairs))
       (displayln ")")
       (display "  ") (write "POSIX manual page data.") (displayln ")")
       (newline)
       (displayln "(provide 'posix-manual-data)")
       (newline)
       (displayln ";;; posix-manual-data.el ends here")))))

(write-emacs-lisp-file)
