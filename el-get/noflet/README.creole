= noflet - Local function decoration =

{{{noflet}}} is dynamic, local, advice for Emacs-Lisp code.

{{{noflet}}} also has an Emacs indentation function for {{{flet}}}
like macros.

It's great for test code when you need to mock another function.

This is useful for definining functions that overide a base definition
in some way. You get access to the original (before you re-defined it)
function through a different name.

Use it like this:

{{{
(noflet ((find-file-noselect (file-name)
           (if (string-match-p "^#.*" file-name)
               (this-fn "/tmp/mytest")
               (this-fn file-name)))
         (expand-file-name (file-name &optional thing)
           (if (string-match-p "^#.*" file-name)
               (concat "/tmp" (file-name-as-directory 
                               (substring file-name 1)))
               (funcall this-fn file-name thing))))
  (expand-file-name "#/thing"))
}}}

This specifies that two functions should be overridden:

* {{{find-file-noselect}}} is changed so that if the file-name begins with {{{#}}} a different file-name altogether is opened
* {{{expand-file-name}}} is changed so that if the file-name begins with {{{#}}} it's resolved via {{{/tmp}}}

In both cases {{{this-fn}}} is used to access the original function
definition of these common Emacs functions.

=== Decorating results ===

{{{noflet}}} can also be used to decorate results, just like
{{{around-advice}}}:

{{{
(noflet ((find-file (file-name &optional wildcards)
           (let ((result (funcall this-fn file-name wildcards)))
              (with-current-buffer result
                 (setq some-buffer-local "special"))
              result)))
    (with-current-buffer (find-file "~/some-file")
      (message "buffer local var is: %s" some-buffer-local)))
}}}

This overrides {{{find-file}}} to set a local variable. There are
surely better ways to do it than this but it illustrates the point.


=== Lexical version ===

Because we include a good indenting function we also include a lexical
{{{flet}}}. It's just a wrapper for {{{cl-flet}}}.

=== todo ===

It would be nice to have a noflet that could work with Emacs/CL style
arg lists, like {{{defun*}}}.

This would allow something like:

{{{
(noflet* ((get-buffer (name &key regex)
           (if name 
               (funcall this-fn name)
               (regex-find-buffer-function regex))))
   ...)
}}}

Doing this looks easy enough to implement with the
{{{cl--transform-lambda}}} function:

{{{
(cl--transform-lambda
 '((fp &key blah)     ; the arglist
   "My function"      ; the doc string
   (setq blah :1))    ; the function body
 'nic-func)           ; the name of the function you're assigning
}}}

this returns something like this:

{{{
(nil (fp &rest --cl-rest--) "My function

(fn FP &key BLAH)" 
(let*
    ((blah
      (car
       (cdr
        (memq ':blah --cl-rest--)))))
  (let
      ((--cl-keys-- --cl-rest--))
    (while --cl-keys--
      (cond
        ((memq
          (car --cl-keys--)
          '(:blah :allow-other-keys))
         (setq --cl-keys--
               (cdr
                (cdr --cl-keys--))))
        ((car
          (cdr
           (memq ':allow-other-keys --cl-rest--)))
         (setq --cl-keys-- nil))
        (t
         (error "Keyword argument %s not one of (:blah)"
                (car --cl-keys--))))))
  (cl-block nic-func
    (setq blah :1))))
}}}

And obviously you can take the CDR of this and use it as a lambda form
or some such.
